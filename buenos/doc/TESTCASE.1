OS Project, test cases for round 1

Group 02
Members 
  Antti Risteli
  Miro Nurmela
  Olli-Matti Saario

--------

General:

All the test cases can be found from the kernel_tests folder. There are also slight
modifications in the buenos/init/main.c (the file that hinted that maybe you should
put some tests here). The desired tests are given as command line arguments when
starting buenos, as will bee seen from the example runs below.

Assignment 1: Locks and condition variables

The test file lock_cond.c/h contains tests for the lock implementation. It creates
a single lock that is then accessed by three threads. The threads simply grab the
lock, try thread switching a bunch of times and proceed to free it, printing their
progress. Since the threads print their progress just after acquiring the lock and
just before releasing it, if the prints of the threads don't overlap, the lock is
keeping their execution separate. We could consider the the part of code between
acquiring and releasing the lock as the critical section.

You can run the test with the following command:

yams buenos lock_test

And here is a test run:

Welcome. This is YAMS virtual terminal.

BUENOS is a University Educational Nutshell Operating System
==========================================================

Copyright (C) 2003-2006  Juha Aatrokoski, Timo Lilja,
  Leena Salmela, Teemu Takanen, Aleksi Virtanen
See the file COPYING for licensing details.

(Initialization stuff)

Mounting filesystems
VFS: TFS initialized on disk at 0xb0008030
VFS: Mounted filesystem volume [testi]
Initializing networking
No initial program (initprog), dropping to fallback
starting lock test
stared thread 0
stared thread 1
stared thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1
locked in thread 0
freeing in thread 0
locked in thread 2
freeing in thread 2
locked in thread 1
freeing in thread 1

The lock seems to be working.

The condition variables are used in the implementation of the producer-consumer
problem, so let's proceed to that.

Assignment 2: Producer-Consumer

The implementation of the producer-producer consumer toy problem also acts as the test
for condition variables. The implementation resides in the buffer_test.c/h file.

As per the assignment requirements, the buffer test implements a bounded buffer
that is used as the basis of the producer consumer example. The test code is pretty simple -
there are producer threads that put things to the buffer and consumer threads that take
things from the buffer. The getting and putting are protected with condition variables (that
tell whether the buffer is empty or full or neither). Since the system doesn't deadlock and
we can read from the output that the elements are written and read in the correct order, we can
conclude that both the condition variables and the bounded buffer work as expected.

You can vary the amount of producers and consumers in the beginning of the test file.

You can run the producer-consumer/buffer test with the following command:

yams buenos buffer_test

Here's an example run (5 producers, 10 consumers):

Welcome. This is YAMS virtual terminal.

BUENOS is a University Educational Nutshell Operating System
==========================================================

Copyright (C) 2003-2006  Juha Aatrokoski, Timo Lilja,
  Leena Salmela, Teemu Takanen, Aleksi Virtanen
See the file COPYING for licensing details.

(Initialization messages)

VFS: TFS initialized on disk at 0xb0008030
VFS: Mounted filesystem volume [testi]
Initializing networking
No initial program (initprog), dropping to fallback
In kernel buffer test
notfull -2147229624, notempty -2147229620
writing 1 in thread 13
writing 1 in thread 14
writing 1 in thread 15
writing 1 in thread 16
writing 1 in thread 17
writing 2 in thread 14
writing 2 in thread 15
writing 2 in thread 16
writing 2 in thread 17
writing 2 in thread 13
read 1 in thread 3
writing 3 in thread 14
read 1 in thread 4
writing 3 in thread 15
read 1 in thread 6
writing 3 in thread 16
read 1 in thread 5
read 1 in thread 7
writing 3 in thread 17
read 2 in thread 3
read 2 in thread 8
writing 3 in thread 13
writing 4 in thread 14
read 2 in thread 4
read 2 in thread 9
writing 4 in thread 15
read 2 in thread 6
read 3 in thread 10
writing 4 in thread 16
read 3 in thread 5
read 3 in thread 7
read 3 in thread 3
writing 4 in thread 17
writing 4 in thread 13
read 3 in thread 4
writing 5 in thread 14
writing 5 in thread 15
read 4 in thread 9
read 4 in thread 6
read 4 in thread 7
writing 5 in thread 16
writing 5 in thread 17
read 4 in thread 8
writing 5 in thread 13
read 4 in thread 4
writing 6 in thread 14
read 5 in thread 12
writing 6 in thread 15
read 5 in thread 9
read 5 in thread 10
writing 6 in thread 16
read 5 in thread 8
writing 6 in thread 17
writing 6 in thread 13
read 5 in thread 4
writing 7 in thread 15
writing 7 in thread 14
read 6 in thread 9
read 6 in thread 6
read 6 in thread 7
writing 7 in thread 16
writing 7 in thread 17
read 6 in thread 5
read 6 in thread 4
writing 7 in thread 13
writing 8 in thread 14
read 7 in thread 9
read 7 in thread 6
writing 8 in thread 15
writing 8 in thread 16
writing 8 in thread 17
read 7 in thread 8
read 7 in thread 5
read 7 in thread 11
writing 8 in thread 13
read 8 in thread 9
writing 9 in thread 14
read 8 in thread 7
writing 9 in thread 15
writing 9 in thread 16
read 8 in thread 10
writing 9 in thread 17
read 8 in thread 8
writing 9 in thread 13
read 8 in thread 4
writing 10 in thread 14
read 9 in thread 9
writing 10 in thread 15
read 9 in thread 7
writing 10 in thread 17
writing 10 in thread 16
read 9 in thread 5
read 9 in thread 8
read 9 in thread 3
writing 10 in thread 13
read 10 in thread 9
writing 11 in thread 14
read 10 in thread 7
writing 11 in thread 15
writing 11 in thread 17
read 10 in thread 5
read 10 in thread 6
writing 11 in thread 16
writing 11 in thread 13
read 10 in thread 9
read 11 in thread 4
writing 12 in thread 14
read 11 in thread 11
writing 12 in thread 15
writing 12 in thread 17
read 11 in thread 12
writing 12 in thread 16
read 11 in thread 9
writing 12 in thread 13
read 11 in thread 8
writing 13 in thread 14
read 12 in thread 4
writing 13 in thread 15
read 12 in thread 7
writing 13 in thread 17
read 12 in thread 12
writing 13 in thread 13
read 12 in thread 8
writing 13 in thread 16
read 12 in thread 10
writing 14 in thread 14
read 13 in thread 3
writing 14 in thread 15
read 13 in thread 7
writing 14 in thread 17
read 13 in thread 12
writing 14 in thread 13
read 13 in thread 8
writing 14 in thread 16
read 13 in thread 10

Producer-consumer problem seems to work fine and that also verifies the functioning
of the condition variables.

Assignment 3: Thread sleep

As described in the README, the sleep implemetation differed from the one depicted
in the review session.

The sleep test is located in sleep_test.c/h.

The sleep test is super simple - it creates three threads that will simply sleep and
print the times they go to sleep, they wake up and the difference between those times.
It's easy to check that the time spent sleeping is greater or equal to the sleep time
asked.

Note that the sleeps are also used in the testing of the phone system (detailed further in
the following section), which stress tests the sleep as well. The sleep funcstions in both
cases.

You can run the sleep test with the following command:

yams buenos sleep_test

And this is an example output:

Welcome. This is YAMS virtual terminal.

BUENOS is a University Educational Nutshell Operating System
==========================================================

Copyright (C) 2003-2006  Juha Aatrokoski, Timo Lilja,
  Leena Salmela, Teemu Takanen, Aleksi Virtanen
See the file COPYING for licensing details.

(Initializations)

VFS: TFS initialized on disk at 0xb0008030
VFS: Mounted filesystem volume [testi]
Initializing networking
No initial program (initprog), dropping to fallback
starting sleep test
> sleeping in thread 3 for 36949, start_time 95
> sleeping in thread 4 for 32452, start_time 97
> sleeping in thread 1 for 43356, start_time 99
> sleeping in thread 5 for 30814, start_time 97
> slept in thread 5 for 30823, asked for 30814, now 30920
> sleeping in thread 5 for 34805, start_time 30924
> slept in thread 4 for 32456, asked for 32452, now 32553
> sleeping in thread 4 for 30125, start_time 32557
> slept in thread 3 for 36955, asked for 36949, now 37050
> sleeping in thread 3 for 34729, start_time 37054
> slept in thread 1 for 43363, asked for 43356, now 43462
> sleeping in thread 1 for 27278, start_time 43466
> slept in thread 4 for 30128, asked for 30125, now 62685
> sleeping in thread 4 for 49354, start_time 62689
> slept in thread 5 for 34808, asked for 34805, now 65732
> sleeping in thread 5 for 46887, start_time 65736
> slept in thread 1 for 27281, asked for 27278, now 70747
> sleeping in thread 1 for 42191, start_time 70751
> slept in thread 3 for 34732, asked for 34729, now 71786
> sleeping in thread 3 for 38784, start_time 71790
> slept in thread 3 for 38787, asked for 38784, now 110577
> sleeping in thread 3 for 35239, start_time 110581
> slept in thread 4 for 49357, asked for 49354, now 112046
> sleeping in thread 4 for 45664, start_time 112050
> slept in thread 5 for 46890, asked for 46887, now 112626
> sleeping in thread 5 for 23702, start_time 112630
> slept in thread 1 for 42194, asked for 42191, now 112945
> sleeping in thread 1 for 39926, start_time 112949
> slept in thread 5 for 23705, asked for 23702, now 136335
> sleeping in thread 5 for 41189, start_time 136339
> slept in thread 3 for 35242, asked for 35239, now 145823
> sleeping in thread 3 for 26642, start_time 145827

Sleep seems to work.

Assignment 4: Phone system

The phone system is simply tested by creating a number of threads to call the make_call function
and a number of threads to call the phone function (referred to as calling_threads and answering
threads in the code). There are some assertions scattered in the code that make sure that the
values are kept sensible.

The phone system can be run with the following command:

yams buenos phone_system

And here's an example run:

Welcome. This is YAMS virtual terminal.

BUENOS is a University Educational Nutshell Operating System
==========================================================

Copyright (C) 2003-2006  Juha Aatrokoski, Timo Lilja,
  Leena Salmela, Teemu Takanen, Aleksi Virtanen
See the file COPYING for licensing details.

(Initializations)

VFS: TFS initialized on disk at 0xb0008030
VFS: Mounted filesystem volume [testi]
Initializing networking
No initial program (initprog), dropping to fallback
starting phone system demo
starting 3 answering threads
answering thread 3 ready to answer
answering thread 4 ready to answer
answering thread 5 ready to answer
starting 10 calling threads
calling thread 6 making a call
calling thread 7 making a call
calling thread 8 making a call
calling thread 9 making a call
calling thread 6 succeeded in making a call
calling thread 10 making a call
answering thread 5 starts talking
calling thread 7 succeeded in making a call
answering thread 4 starts talking
calling thread 12 making a call
calling thread 11 making a call
calling thread 9 succeeded in making a call
answering thread 3 starts talking
calling thread 13 making a call
calling thread 12 succeeded in making a call
calling thread 10 failed at making a call, lines full
calling thread 14 making a call
calling thread 11 failed at making a call, lines full
calling thread 13 failed at making a call, lines full
calling thread 14 failed at making a call, lines full
calling thread 8 succeeded in making a call
calling thread 15 making a call
calling thread 15 failed at making a call, lines full
calling thread 6 making a call
calling thread 7 making a call
answering thread 5 finished answering
answering thread 4 finished answering
calling thread 7 succeeded in making a call
answering thread 5 ready to answer
calling thread 9 making a call
answering thread 4 ready to answer
answering thread 5 starts talking
answering thread 3 finished answering
calling thread 12 making a call
calling thread 9 succeeded in making a call
calling thread 6 succeeded in making a call
answering thread 4 starts talking
answering thread 3 ready to answer
calling thread 12 failed at making a call, lines full
calling thread 8 making a call
answering thread 3 starts talking
calling thread 8 failed at making a call, lines full
calling thread 7 making a call
calling thread 7 failed at making a call, lines full
answering thread 5 finished answering
answering thread 5 ready to answer
calling thread 9 making a call
answering thread 5 starts talking
calling thread 6 making a call
calling thread 9 succeeded in making a call
calling thread 6 failed at making a call, lines full
answering thread 4 finished answering
answering thread 3 finished answering
answering thread 4 ready to answer
answering thread 3 ready to answer
answering thread 4 starts talking
answering thread 3 starts talking
answering thread 5 finished answering
calling thread 9 making a call
answering thread 5 ready to answer
calling thread 9 succeeded in making a call
answering thread 5 starts talking
answering thread 4 finished answering
answering thread 3 finished answering
answering thread 4 ready to answer
answering thread 3 ready to answer
calling thread 9 making a call
answering thread 5 finished answering
calling thread 9 succeeded in making a call
answering thread 4 starts talking
answering thread 5 ready to answer
calling thread 10 making a call
calling thread 10 succeeded in making a call
calling thread 11 making a call
answering thread 3 starts talking
calling thread 13 making a call
calling thread 14 making a call
answering thread 5 starts talking
calling thread 11 succeeded in making a call
calling thread 13 succeeded in making a call
calling thread 15 making a call
calling thread 14 succeeded in making a call
calling thread 15 failed at making a call, lines full
calling thread 9 making a call
answering thread 4 finished answering
calling thread 9 succeeded in making a call
answering thread 4 ready to answer
answering thread 4 starts talking
calling thread 10 making a call
answering thread 3 finished answering
calling thread 10 succeeded in making a call
answering thread 3 ready to answer
answering thread 5 finished answering
answering thread 3 starts talking
answering thread 5 ready to answer
calling thread 12 making a call
calling thread 11 making a call
answering thread 5 starts talking
calling thread 8 making a call
calling thread 14 making a call
calling thread 12 succeeded in making a call
calling thread 13 making a call
calling thread 11 failed at making a call, lines full
calling thread 14 failed at making a call, lines full
calling thread 13 failed at making a call, lines full
calling thread 8 failed at making a call, lines full
calling thread 9 making a call
calling thread 9 failed at making a call, lines full
answering thread 4 finished answering
answering thread 4 ready to answer
answering thread 4 starts talking
calling thread 7 making a call
calling thread 7 succeeded in making a call
calling thread 10 making a call
calling thread 10 failed at making a call, lines full
answering thread 3 finished answering
calling thread 6 making a call
answering thread 3 ready to answer
calling thread 6 succeeded in making a call
answering thread 3 starts talking
calling thread 12 making a call
answering thread 5 finished answering
calling thread 12 succeeded in making a call
answering thread 5 ready to answer
answering thread 5 starts talking
answering thread 4 finished answering
answering thread 4 ready to answer
answering thread 4 starts talking
calling thread 7 making a call
calling thread 7 succeeded in making a call
calling thread 6 making a call

As we can read, excessive call are rejected, only the desired number (3) of calls gets answered
and the system doesn't deadlock. This also further verifies that the thread sleep works, since
it's used in two places in the system (answering threads sleep after answering to simulate
talking on the phone, calling threads will wait upon successful and failed calls to simulate
talking and waiting to try again, respectively).

Assignment 5: Priority queues

We also implemented the simple thread priority (with high and normal priorities) and there is a
test file for those that as well, priority_test.c/h. The priority test is very simple - it spawns
3 high priority threads and 20 normal priority threads and the expected outcome is that mostly
the high priority threads will be run (since there are 4 cores some normal priority threads will
be run as well). The priority test can be run with the command:


Welcome. This is YAMS virtual terminal.

BUENOS is a University Educational Nutshell Operating System
==========================================================

Copyright (C) 2003-2006  Juha Aatrokoski, Timo Lilja,
  Leena Salmela, Teemu Takanen, Aleksi Virtanen
See the file COPYING for licensing details.

(Inits)

VFS: TFS initialized on disk at 0xb0008030
VFS: Mounted filesystem volume [testi]
Initializing networking
No initial program (initprog), dropping to fallback
starting high priority threads
Running high priority thread
Running high priority thread
starting normal priority threads
Running high priority thread
Running high priority thread
starting normal priority threads
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
starting normal priority threads
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
starting normal priority threads
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
starting normal priority threads
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread
Running low priority thread
Running high priority thread
Running high priority thread

As we can see, the high priority threads are run much more frequently than the normal priority
threads, even though there are many more normal priority threads. This implies that the priority
system works on threads.


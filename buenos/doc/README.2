OS Project, readme round 2

Group 02
Members
    Antti Risteli
    Miro Nurmela
    Olli-Matti Saatio

--------

Assignment 1

1. Changed files
    - kernel/exception.c (removed kernel panicing when doing userland<->kernel copying)
    - kernel/thread.c/h (added the flags that signify that copying between kernel and
      userland is in process)
    - proc/process.c/h (functions to do the actual copying between kernel and userland)

2. Description of the solution
    - the solution works as follows (for copying both certain length strings and blocks
      of predefined size)
        - get the current thread entry
        - decide which way we are copying (kernel -> userland or userland -> kernel)
        - assert that we are currently not copying
        - put up the flag that tells that copying in process
        - then, for each byte to be copied, check that the userland pointer is in a
          userland legal region (userland mapped memory)
            - if it is, copy the byte and process the next byte
            - if it's not, put down the copying flag and return an error
            - if an exception has occured during the copying, also put down the copy flag
              and return error
        - finally, if all went well, return the amount of bytes copied
    - in the case of copying strings, also make sure that we're not overflowing the kernel
      side buffer

3. Motivation behind the solution
    - the solution aims for simplicity and throroughness, and checking every byte seems
      like the way to do it

4. Changes to the plan presented in the review session
    - None

----------

Assignment 2

1. Changed files
    - proc/process.c/h contains the tables and data structures for this assignment

2. Description of the solution
    - in this assignment we have implemented two data structures for the processes - 
      one table for process entries and one table for filehandles
    - both tables are protected with a lock in order to satisfy the synchronization
      requirement of the assignment
    - the size of the filehandle table is capped by the maximum number of open files
    - the size of the process table is capped at 64
    - the process entry stores:
        - the name of the process (executable name + where it's found on the file system)
        - process state (free, running, zombie), where free signifies that the entry is free
        - the process id of the parent
        - return value of the process
    - the filehandle entry contains:
        - flag telling if the entry is in use
        - the owner of the entry
        - the openfile_t identifier of of the file in the filesystem
    - there's also a condition variable that is used to put the processes that are waiting for
      their children to sleep, but more on that in syscall_join

3. Motivation behind the solution
    - tables with locks are the simplest synchronized data structures

4. Changes to the plan presented in the review session
    - none

--------------

Assignment 3

Of note: this assignemnt is the big one on this round, so the following wall of text will be the
longest yet.

1. Changed files
    - the system calls are implemented in proc/syscall.c
    - proc/process.c/h are also modified in order to accomodate the safe copying
      of parameters between userland and kernel and and passing parameters to processes
      (in practice, the process_start() has been split to process_start() ans process_init()
      and modified such that it accepts parameters)

2. Description of the solution
    - let's go through the syscalls one by one
    
    - since we implemented the argument augmented processes, the processes are started with
      the execp function
    - syscall_execp(filename, argcount, aruments):
        - copy the filename to kernel (using the safe copy mechanism)
        - if the copying failed (nothing was copied, a bad pointer was given or too many
          arguments were supplied), return error (and in case of the bad pointer, exit the
          process)
        - copy the argument pointer to the kernel (there is always at least one argument, which is
          the name of the executable file)
        - if invalid pointers are supplied, exit the process
        - then copy the arguments kernel, as pointed out by the argument pointer and the amount
          of arguments (and some sweet pointer arithmetic!)
        - again, in case of illegal pointers, exit the process and in case of failed copies return
          a note of that
        - after everything is safely copied to the kernel, call process start with the arguments

    - syscall_join(int process_id):
        - validate the process id
        - if invalid, return error code
        - lock the process table
        - check that there is a process in the process table with the given id and that that process
          is this process' child
        - if not, return error code
        - wait for the condition variable that tells that a process has become a zombie
            - if the process we are joining with is no longer running, free up the process table entry
              and get the return value from the child
            - otherwise wait more
        - release the process table lock and return the result

    - syscall_exit(int return_value):
        - get the current process
        - lock the filehandle table
        - close the filehandles associated with this process and free the filehandle table entries
        - release the filehandle lock
        - lock the process table
        - set the return value of the process
        - set the process state to zombie
        - go clean out the zombie children from the process table
        - release the process table lock
        - broadcast the zombie condition variable (so that the processes joining to this process can
          exit)
        - clean up the pagetable and free the physical pages associated to the process
        - call thread finish

    - syscall_open(filename):
        - copy the filename to the kernel (check for errors, return error codes if necessary and all that
          jazz)
        - aquire the filehandle table lock
        - find the first free entry in the filehandle table
        - if no free entries, return error code
        - open the file (with the filesystem's function)
        - if opening succeeded, populate the filehandle table entry
        - if not, return error code
        - finally, increment the processes filehandle by 3 (handles 0-2 are for standard streams)
        - release the filehandle table lock
        - return the filehandle (or error code)

    - syscall_close(filehandle)
        - lock the filehandle table
        - decrement the filehandle by 3 (again, handles 0-2 reserved)
        - validate the filehandle
        - check that the filehandle is in use and is owned by the current process
        - if all good, use the filesystem's function to close the file
        - mark the filehandle table entry free
        - release the lock
        - return the result (negative on error)

    - syscall_seek(filehandle, position):
        - seek is exactly the same as close, but instead of close we call the seek
          function of the filesystem

    - syscall_read(filehandle, buffer, length):
        - cap the length to kernel buffer size (we have capped it to 256)
        - safely copy the filename to kernel (and handle errors)
        - if we are trying to read from stdout or stderr, return error
        - if we are reading from stdin, use the tty_read
        - if we are reading from a file:
            - lock the filehandle table
            - get the appropriate entry from filehandle table
            - if the entry is valid (in use and owned by this process) read from the
              given file to a buffer
            - otherwise return error
            - release the filehandle table lock
        -copy the buffer read from file to kernel using the sae copy methods (report errirs etc)
        -return the result (or error, if that occured)

    - syscall_write(filehandle, buffer, length)
        - writing is exacly like reading, but instead of copying the buffer to kernel in the end
          (since we are not reading anything), we copy the buffer we want to write to kernel
          in the beginning
        - of course we have to check the streams differently (you can't write to stdin, but you
          can in stdout and stderr)

    - syscall_create(filename, size), syscall_delete(filename)
        - these functions are mainly wrappers for the filesystem's functions, augmented with safe
          copying of the appropriate elements to kernel
        

3. Motivation behind the solution
    - There were not particularly hard dwsign decision regarding the syscall implementations,
      so they were implemented as leanly as possible

4. Changes to the plan presented in the review session
    - none

Assignment 4

1. Changed files

2. Description of the solution

3. Motivation behind the solution

4. Changes to the plan presented in the review session

Assignment 5

1. Changed files

2. Description of the solution

3. Motivation behind the solution

4. Changes to the plan presented in the review session

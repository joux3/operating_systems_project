OS Project, readme round 3

Group 02
Members
    Antti Risteli
    Miro Nurmela
    Olli-Matti Saario

--------

Assignment 1

1. Changed files
    - driver/network.h
    - driver/network.c

2. Description of the solution
    - the relevant datastructures are:
        - a struct for the NIC IO area (layout as described in the YAMS manual)
        - NIC real device struct that holds spinlock, message received flag and
          the elements used to put threads to the sleep queue
    - the init functions clears the NIC (clears all IRQs, resets spinlock),
      initializes the required memory, binds the functions to the gnd and
      registers the interrupt handler
    - the interrupt handler listens to the interrupts and wakes the appropriate
      sleeping threads (what sleeps on what is described later)
    - also worth noting that the interrupt handler clears the RXIRQ, since in
      testing it turned out that if it wasn't cleared here, the clearing code
      would very likely not be scheduled later
    - the send and receive functions work roughly the same way - once they
      are called, they wil check if the NIC is sending/receiving
        - if the NIC is sending/receiving or in the receiving case no packet has arrived yet,
          put the thread to sleep (waking
          up once the correct interrupts are received)
        - if not (or the thread is woken up and is now clear to proceed), send the
          appropriate commands to the NIC and check for errors
        - if there were errors, NIC is in corrupted state -> KERNEL PANIC
        - otherwise return 0 to signify success
    - the frame size and hwaddr functions are fairly trivial, since you can simply
      get your values from the NIC io area

3. Motivation behind the solution
    - we followed the instructions on the BUENOS roadmap and YAMS manual, and that
      resulted in a pretty clean solution

4. Changes to the plan presented in the review session
    - originally the RXIRQ was cleared once the receiving thread had woken up, but it
      turned out that the thread in nic_recv would never be scheduled while the
      interrupt handler was screaming it to wake up - we fixed this by adding a flag
      to the nic_real_dev that is set in the interrupt handler to signify that there is
      a message in the buffer and clearing the RXIRQ and cleared once nic_recv is scheduled.

----------

Assignment 2


1. Changed files
    - fs/sfs.c
    - fs/sfs.h

2. Description of the solution
    - Added struct sfs_open_file_t to describe an open file 
        - lock for writer mutual exclusion
        - semaphore with initial value of MAX_READERS for access
        - int is_deleted flag
        - uint32_t file_block to file header block

    - Changed sfs_t by adding a sfs_open_file_t array of size SFS_MAX_OPEN_FILES

    - sfs_open:
        - find disk block of the file (fail if not found)
        - check if file with name already opened by checking the open_files array
          for the file block
            - if open:
                - if deleted flag is up return VFS_ERROR
                - save array index for handle
            - else:
                - if not set up new sfs_open_file_t to unreserved spot in open_files
                    - create lock and access semaphore 
                    - set is_deleted to 0 and open_count to 0
        - already open or not raise open_count by 1 and return index as handle

    - sfs_close:
        - lock sfs
        - lower file open_count
        - if file open_count == 0 and its marked as deleted by is_deleted:
            - free all file blocks
            - destroy sfs_open_file_t semaphore and lock
        - release sfs lock
    
    - sfs-read:
        - get the corresponding sfs_open_file_t with given handle
        - lower the semaphore in open_file by 1
        - read the file with buffers allocated dynamically
        - raise the semaphore in open_file and return
        
    - sfs-write:
        - get the corresponding sfs_open_file_t with given handle
        - take write lock for the open_file
        - lower the semaphore in open_file in loop MAX_READERS times so that all
          readers are locked out
        - write data to disk
        - raise the semaphore MAX_READERS times
        - unlock write lock for open_file and return 

    - sfs-unmount:
        - loop all open_files and close them, thus releasing all locks and sems
       

3. Motivation behind the solution
    - easily allows concurrent access to reading/writing the same same
    - semaphore easily fits the use case of multiple readers/writers
    - lock in sfs_open_file_t is required to serialize writers as the semaphore interface
      doesn't support lowering the value with arbitary amount in a single call
   
4. Changes to the plan presented in the review session
    - none

--------------

Assignment 3

1. Changed files
    - fs/sfs.c
    - fs/sfs.h

2. Description of the solution
    - each file can have both direct and indirect data blocks associated with it
    - indirect blocks contain links to data blocks or other indirect blocks
    - file inodes have support for multiple direct data blocks, one single indirect
      data block, one double indirect data block and one triple indirect data block
      (for example double indirect data block link in a file links to a block that 
      links to a block that contains links to actual data blocks)
    - track of used disk blocks is kept using Block Allocation Blocks that just contain
      a bitmap of the block free statuses. enough BABs are allocated to cover the whole
      disk

3. Motivation behind the solution
    - supporting files up to 1 megabyte in size requires a file structure, that can
      refer to 8192 different 128-byte-size disk blocks. the presented solution is a
      simple way to achieve that and it doesn't waste too much space as the indirect
      blocks are only used when needed

4. Changes to the plan presented in the review session
    - none

------------------

Assignment 4

1. Changed files
    - fs/sfs.c
    - fs/sfs.h

2. Description of the solution
    - each inode block on the disk is marked as a directory or file
        - file inodes work like described in assignment 3 
        - dir inodes just contain names and inode links + inode link to the next dir 
          in chain 
    - directory nodes just contain names and inode links to the actual blocks which can
      be either directory or file blocks
    - the root directory is always the first inode after all the Block Allocation Blocks
    - for example; the file a/b/c is found by
        - starting from the root inode and looking for entry with the name "a"
          (if it's not found from the root dir inode, continue to follow the directory chain
           until the chain ends or it's found)
        - make sure that the found inode is a directory. then do the same steps again for "b",
          but starting from the current inode
        - finally look for the entry "c", also following the chain if needed

3. Motivation behind the solution
    - making no distinction between files and directories in the entry links simplifies 
      implementation
    - dir inodes for a certain level form a chain so that a directory can hold more files
      or subdirectories than can fit in one disk block

4. Changes to the plan presented in the review session
    - none
